//
// MIT License
//
// Copyright (c) 2022 Carson Herrington
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// ====================================================================================================
// NextKhajiitBot - NotArtyom - 2022
// ----------------------------------------
// A new rendition of khajiitbot in C using the Concord discord library
// ====================================================================================================

#ifndef _KBOT_H
#define _KBOT_H

/*  */

// ----------------------------------------------------------------------------------------------------
// Bot Interface 

#define KBOT_PREFIX		"k."

#define KBCOLOR_MSG		0xf5367c					// the default embed color used by bot embeds
#define KBCOLOR_ERROR	0xe62f2f					// the embed color used for error messages

#define KBCOLOR_TRUE			0x11ff5c
#define KBCOLOR_FALSE			0xff2600
#define KBCOLOR_UNDETERMINED	0xff9602

// ----------------------------------------------------------------------------------------------------
// Internal Constants

#define _TARGET_MAX_LEN 1000		// the length to be allocated for an action's target string
#define _ACTION_MAX_LEN 2000		// the maximum length of the message generated by an action
#define _MSG_MAX_LEN	2000

// ----------------------------------------------------------------------------------------------------
// Helper Macros

#define STR_ARRAY_LEN(a)		(sizeof(a) / sizeof(*a))
#define STRUCT_ARRAY_LEN(a)		(sizeof(a) / sizeof(a[0]))

#define ON_DEBUG				if (kbot_debug)
#define DEBUG_PRINTF(...)		if (kbot_debug) fprintf(stderr, __VA_ARGS__)
#define CMD_IGNORE_BOTS(a)		if (msg->author->bot) return;	// use at start of cmd to ignore bots

/* this monstrosity allows me to send a static embed in just one line */
/* im pretty sure it wont collide with any namespaces */
#define SEND_MSG_EMBED(a) \
	{ \
		struct discord_embed embeds[] = {{ \
			.color = KBCOLOR_MSG, \
			.description = a \
		}}; \
		struct discord_create_message params = { \
			.embeds = &(struct discord_embeds) { \
				.size = sizeof(embeds) / sizeof *embeds, \
				.array = embeds, \
			} \
		}; \
		discord_create_message(client, msg->channel_id, &params, NULL); \
	}
	
#define SEND_COLOR_EMBED(a, b) \
	{ \
		struct discord_embed embeds[] = {{ \
			.color = b, \
			.description = a \
		}}; \
		struct discord_create_message params = { \
			.embeds = &(struct discord_embeds) { \
				.size = sizeof(embeds) / sizeof *embeds, \
				.array = embeds, \
			} \
		}; \
		discord_create_message(client, msg->channel_id, &params, NULL); \
	}
	
// ----------------------------------------------------------------------------------------------------

extern bool kbot_debug;

// ----------------------------------------------------------------------------------------------------

#endif
